<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Post-rsses on Justin Zimmerman</title>
    <link>http://justinzimmerman.net/post/index.xml</link>
    <description>Recent content in Post-rsses on Justin Zimmerman</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>justin.richard.zimmerman@gmail.com (Justin Zimmerman)</managingEditor>
    <webMaster>justin.richard.zimmerman@gmail.com (Justin Zimmerman)</webMaster>
    <copyright>(c) 2016 Justin Zimmerman.</copyright>
    <lastBuildDate>Tue, 18 Oct 2016 08:19:39 -0400</lastBuildDate>
    <atom:link href="http://justinzimmerman.net/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>CLI Testing in Go</title>
      <link>http://justinzimmerman.net/post/cli-testing-golang/</link>
      <pubDate>Tue, 18 Oct 2016 08:19:39 -0400</pubDate>
      <author>justin.richard.zimmerman@gmail.com (Justin Zimmerman)</author>
      <guid>http://justinzimmerman.net/post/cli-testing-golang/</guid>
      <description>

&lt;h1 id=&#34;writing-unit-tests-for-go-golang-clis&#34;&gt;Writing unit tests for Go (Golang) CLIs&lt;/h1&gt;

&lt;p&gt;A majority of my background has been developing web applications. I&amp;rsquo;ve recently changed teams at work to a team that is primarily focused on building a CLI.&lt;/p&gt;

&lt;p&gt;Writing tests in Go is a relatively simple process, especially coming from JavaScript where you need multiple modules, and lots of code before you even begin writing tests.&lt;/p&gt;

&lt;p&gt;The testing package has most everything you need for writing unit tests. Below is an example CLI test to get started:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
  &amp;quot;encoding/json&amp;quot;
	&amp;quot;io/ioutil&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;testing&amp;quot;
)

// a dummy config file to pass in as a slice of bytes
var jsonConfig = []byte(`
  {
    &amp;quot;site-name&amp;quot;: &amp;quot;example.com&amp;quot;,
    &amp;quot;cache-control&amp;quot;: &amp;quot;max-age=86400&amp;quot;,
    &amp;quot;publish-dir&amp;quot;: &amp;quot;public/&amp;quot;
  }
`)

// Config struct to handle config unmarshalling
type Config struct {
  SiteName string `json:&amp;quot;site-name&amp;quot;`
  CacheControl string `json:&amp;quot;cache-control&amp;quot;`
  PublishDir string `json:&amp;quot;publish-dir&amp;quot;`
}

// LoadConfig will read the given file for the site
// and then load that file into the Config struct for internal usage.
func LoadConfig(path string) (Config, error) {
	config := Config{}
	contents, err := ioutil.ReadFile(path)
	if err != nil {
		return config, err
	}

  err = json.Unmarshal(contents, &amp;amp;config)
  if err != nil {
    return config, err
  }

	return config, nil
}

// TestLoadConfig tests the LoadConfig function to load a config.json file
func TestLoadConfig(t *testing.T) {
	// write config to current folder (0664 denotes the permissions in octal notation)
	ioutil.WriteFile(&amp;quot;config.json&amp;quot;, jsonConfig, os.FileMode(int(0664)))
	// clean up config.json after tests are completed
	defer os.Remove(&amp;quot;config.json&amp;quot;)

	config, err := LoadConfig(&amp;quot;config.json&amp;quot;)
	if err != nil {
		t.Error(&amp;quot;Loading  config failed&amp;quot;)
	}
	t.Logf(&amp;quot;config successfully created: \n %v&amp;quot;, config)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As we can see, writing tests for a CLI doesn&amp;rsquo;t have to be crazy. We create our file, defer the removal of that file, and test the LoadConfig function.&lt;/p&gt;

&lt;p&gt;I hope this shows just how simple CLI testing with Go can be.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bestrida</title>
      <link>http://justinzimmerman.net/post/bestrida/</link>
      <pubDate>Sun, 04 Sep 2016 09:45:50 -0400</pubDate>
      <author>justin.richard.zimmerman@gmail.com (Justin Zimmerman)</author>
      <guid>http://justinzimmerman.net/post/bestrida/</guid>
      <description>

&lt;p&gt;I recently published &lt;a href=&#34;https://appsto.re/us/lBRCeb.i&#34;&gt;Bestrida&lt;/a&gt; to the iOS app store for my submission to the 2016 Strava Developer Challenge. Here is a brief overview of the application. Strava.com is a popular and widely used website and mobile app that over one million cyclists and runners use to track their activity via GPS. Whenever you go for a run or ride your bike, Strava will track and store your activity and provide you with useful statistics. As awesome as it is, a major thing Strava does not offer is a way to challenge your friends.&lt;/p&gt;

&lt;h3 id=&#34;bestrida&#34;&gt;Bestrida&lt;/h3&gt;

&lt;p&gt;Bestrida, swedish translation &amp;ldquo;to challenge&amp;rdquo;, is a Strava.com segment based application that allows you to challenge your friends to running and cycling segments. With the chaotic schedules many of us have, it’s hard to carve out time to actually meet up with a friend and go for a run or ride. Your friends no longer have an excuse to keep dodging your challenges just because you&amp;rsquo;re an Ironman and they’re a weekend warrior. You can challenge your friends using the app, anytime, anywhere.&lt;/p&gt;

&lt;h3 id=&#34;challenge-feed&#34;&gt;Challenge Feed&lt;/h3&gt;

&lt;p&gt;After logging in, the user is presented with the Challenge Feed. The Challenge Feed aggregates all of the challenges that the user has received from other users and challenges that the user has sent out to their friends. The user can click on a particular challenge and preview the segment for that challenge. Here we can see the relevant metrics for this segment. The user can also have the option to cancel the challenge. Users can accept or decline challenges from the feed as well.&lt;/p&gt;

&lt;h3 id=&#34;create-challenge&#34;&gt;Create Challenge&lt;/h3&gt;

&lt;p&gt;At the top of the screen, the user can click on the “Create Challenge” button to create a new challenge. To create a challenge, the user will first select a challenger. They have the option to either select from a list of their 3 most frequently challenged friends or search from the list of their Strava friends to challenge. The user will then select a segment. Similar to selecting a challenger, the user will have the option to either select from a list of their 3 most frequently completed segments or search for starred or recently completed segments. The last step is to select a completion date which acts like an expiration date by which both users must complete that particular challenge. Once the challenge has been created and accepted by the other user, it will be displayed on the “Active Challenges” tab.&lt;/p&gt;

&lt;h3 id=&#34;active-challenges&#34;&gt;Active Challenges&lt;/h3&gt;

&lt;p&gt;In the “Active Challenges” tab, the user can view a list of all active challenges, which are challenges that have been accepted
by both parties. The Active Challenge feed shows the opponent, the segment, and the completion date. You can click on the
active challenge to view more detailed information about that particular challenge.&lt;/p&gt;

&lt;p&gt;Once the user completes an activity on Strava that covers the segment, the user can click in to the Active Challenge Detail view to complete the challenge.&lt;/p&gt;

&lt;h3 id=&#34;completed-challenges&#34;&gt;Completed Challenges&lt;/h3&gt;

&lt;p&gt;Once the challenge is completed, the user can view the Completed Challenge feed to see whether they have won, lost, or are waiting for their opponent to complete the challenge. When the challenge is completed by both parties, you can see whether you won or lost, the segment name, the distance and specific details about the user and their opponent including completion time, heart rate, cadence, and wattage during the segment.&lt;/p&gt;

&lt;p&gt;This application was built with React Native, and Node, with a Mongo database to store users, segments, and challenges.&lt;/p&gt;

&lt;p&gt;Thanks for reading. Download &lt;a href=&#34;https://appsto.re/us/lBRCeb.i&#34;&gt;Bestrida&lt;/a&gt; today to start challenging your friends and improving your workouts and segment times!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Switching From Bash to ZSH</title>
      <link>http://justinzimmerman.net/post/switching-from-bash-to-zsh/</link>
      <pubDate>Mon, 01 Aug 2016 09:33:10 -0400</pubDate>
      <author>justin.richard.zimmerman@gmail.com (Justin Zimmerman)</author>
      <guid>http://justinzimmerman.net/post/switching-from-bash-to-zsh/</guid>
      <description>

&lt;p&gt;I recently switched from BASH (Bourne Again SHell) to ZSH after hearing about z shell&amp;rsquo;s many benefits.&lt;/p&gt;

&lt;p&gt;The main benefits for me were better autocompletion, and file globbing, and better autocorrection. I spent quite a few weekends doing research on whether to switch or not, and finally I bit the bullet.&lt;/p&gt;

&lt;h2 id=&#34;installing-zsh-with-homebrew&#34;&gt;Installing ZSH with Homebrew&lt;/h2&gt;

&lt;p&gt;While this isn&amp;rsquo;t necessary, it&amp;rsquo;s incredibly straightforward to do. The default version of ZSH shipped with OSX is 5.0.2. The latest version of ZSH at the time of writing is 5.2.&lt;/p&gt;

&lt;h3 id=&#34;download-zsh&#34;&gt;Download ZSH&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;brew update
brew install zsh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once installation is completed, we need to insert the location into &lt;code&gt;/etc/shells&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; sudo vim /etc/shells
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Insert the following line to the end of the file&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/local/bin/zsh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the file path that homebrew system linked ZSH to.&lt;/p&gt;

&lt;p&gt;To set the default shell to ZSH&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chsh -s /usr/local/bin/zsh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This might require a restart, but once completed verify zsh is your default shell by running&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo $SHELL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you have the latest ZSH running as default.&lt;/p&gt;

&lt;h3 id=&#34;installing-oh-my-zsh&#34;&gt;Installing oh-my-zsh&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh&#34;&gt;oh-my-zsh&lt;/a&gt; repository is a very large open source collection of zsh plugins and &lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh/wiki/themes&#34;&gt;themes&lt;/a&gt;. While there are a few alternatives to oh-my-zsh, such as prezto. I wanted to be able get started right away.&lt;/p&gt;

&lt;p&gt;To install oh-my-zsh run the following&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sh -c &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will modify your &lt;code&gt;.zshrc&lt;/code&gt; file&lt;/p&gt;

&lt;p&gt;It comes with the &amp;ldquo;robbyrussell&amp;rdquo; theme as default, but I wanted something a bit more exciting like the &amp;ldquo;agnoster&amp;rdquo; theme as pictured below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://justinzimmerman.net/img/agnoster.png&#34; alt=&#34;agnoster theme&#34; /&gt;&lt;/p&gt;

&lt;p&gt;To switch themes, open your .zshrc file and replace this line&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ZSH_THEME=&amp;quot;robbyrussell&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ZSH_THEME=&amp;quot;agnoster&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is also a great time to copy over your custom &lt;code&gt;.bash_profile&lt;/code&gt; configs to the &lt;code&gt;.zshrc&lt;/code&gt; file.&lt;/p&gt;

&lt;h3 id=&#34;installing-powerline-fonts&#34;&gt;Installing Powerline Fonts&lt;/h3&gt;

&lt;p&gt;The only problem is that the agnoster theme requires &lt;a href=&#34;https://github.com/powerline/fonts&#34;&gt;Powerline fonts&lt;/a&gt; to show the &amp;ldquo;pipeline&amp;rdquo; icons. Fortunately installing the fonts is very simple and comes with a script.&lt;/p&gt;

&lt;p&gt;First, clone down the &lt;code&gt;powerline/fonts&lt;/code&gt; repository into your github work folder&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/powerline/fonts.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then &lt;code&gt;cd fonts&lt;/code&gt; into the fonts repository and run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./install.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once completed, this also might require a restart to show the new fonts available.&lt;/p&gt;

&lt;p&gt;In your terminal (iTerm2 or HyperTerm) change the default font to one of the &amp;ldquo;for powerline&amp;rdquo; fonts. I chose &lt;code&gt;Meslo for Powerline&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once selected, you have successfully completed setting up ZSH with oh-my-zsh!&lt;/p&gt;

&lt;p&gt;Congratulations on your awesome new terminal!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Switching from iTerm to HyperTerm</title>
      <link>http://justinzimmerman.net/post/switching-from-iterm-to-hyperterm/</link>
      <pubDate>Sat, 23 Jul 2016 20:12:34 -0400</pubDate>
      <author>justin.richard.zimmerman@gmail.com (Justin Zimmerman)</author>
      <guid>http://justinzimmerman.net/post/switching-from-iterm-to-hyperterm/</guid>
      <description>

&lt;p&gt;Recently &lt;a href=&#34;https://zeit.co/&#34;&gt;zeit.co&lt;/a&gt; released to the world a wonderful terminal built with JavaScript / HTML / CSS called &lt;a href=&#34;https://hyperterm.org/&#34;&gt;HyperTerm&lt;/a&gt;. Even better yet, this terminal is fully customizable with open source plugins.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not one to change my development environment constantly, but this electron app was simple to install on OSX and even easier to customize programmatically.&lt;/p&gt;

&lt;p&gt;My hope is to demo how simple it is to get started with HyperTerm, and show how I only added a few lines to the configuration file to have a terminal I enjoy to use.&lt;/p&gt;

&lt;h3 id=&#34;installing-hyperterm&#34;&gt;Installing HyperTerm&lt;/h3&gt;

&lt;p&gt;To install HyperTerm on OSX simply install the .pkg file from their &lt;a href=&#34;https://hyperterm.org/#installation&#34;&gt;website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once installed, use your editor of choice to open &lt;code&gt;~/.hyperterm.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;While the default configuration is very good, I have a few recommended configurations.&lt;/p&gt;

&lt;h3 id=&#34;configuring-hyperterm&#34;&gt;Configuring HyperTerm&lt;/h3&gt;

&lt;p&gt;First, change the theme by simply adding &lt;code&gt;hyperterm-solarized-dark&lt;/code&gt; to the plugins array.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;plugins: [
    &#39;hyperterm-solarized-dark&#39;,
  ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save the configuration, and HyperTerm will automatically update for you.&lt;/p&gt;

&lt;p&gt;I also enjoy using the &lt;code&gt;hyperlinks&lt;/code&gt; plugin to open links with your browser, we can also add this to the plugins array.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;plugins: [
    &#39;hyperterm-solarized-dark&#39;,
    &#39;hyperlinks&#39;
  ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since I use ZSH with a Powerline font, I can simply update the fonts to include &lt;code&gt;Meslo for Powerline&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// font family with optional fallbacks
fontFamily: &#39;&amp;quot;Meslo LG L DZ for Powerline&amp;quot;, Menlo, &amp;quot;DejaVu Sans Mono&amp;quot;, &amp;quot;Lucida Console&amp;quot;, monospace&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can also modify the default window size of HyperTerm.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// size of window by pixels (width, height)
windowSize: [1300, 650]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With a few lines of code, we now have a fully customizable terminal!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hack Reactor Week 12</title>
      <link>http://justinzimmerman.net/post/hack-reactor-week-12/</link>
      <pubDate>Sun, 10 Jan 2016 10:05:17 -0400</pubDate>
      <author>justin.richard.zimmerman@gmail.com (Justin Zimmerman)</author>
      <guid>http://justinzimmerman.net/post/hack-reactor-week-12/</guid>
      <description>&lt;p&gt;The realization that Week 12 has finally come to an end is definitely bitter-sweet. I have spent over 11 hours a day for the past 12 weeks learning Full-Stack Software Engineering. While I am looking forward getting back to a regular sleep schedule, I have learned more than I could imagine, and met many amazing people along the way.&lt;/p&gt;

&lt;p&gt;Week 12 consisted of finalizing resumes, creating cover letters, and preparing for the job search ahead. This was one of the most interesting weeks of Hack Reactor, although I can&amp;rsquo;t go into much detail on their job search process.&lt;/p&gt;

&lt;p&gt;I have greatly enjoyed the Hack Reactor journey, and I hope if you are considering Hack Reactor that you have found my 12 weeks of blog posts insightful.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hack Reactor Week 11</title>
      <link>http://justinzimmerman.net/post/hack-reactor-week-11/</link>
      <pubDate>Sun, 03 Jan 2016 08:27:56 -0400</pubDate>
      <author>justin.richard.zimmerman@gmail.com (Justin Zimmerman)</author>
      <guid>http://justinzimmerman.net/post/hack-reactor-week-11/</guid>
      <description>

&lt;p&gt;With our product, Bestrida, to MVP (Minimum Viable Product) we will continue to improve our MVP features, as well as the look and feel of product, for the remainder of the week.&lt;/p&gt;

&lt;h3 id=&#34;design&#34;&gt;Design&lt;/h3&gt;

&lt;p&gt;Our product finally received a much needed design overhaul, and we are definitely happy with the result:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://justinzimmerman.net/img/bestrida.jpg&#34; alt=&#34;Bestrida&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;stretch-goals&#34;&gt;Stretch Goals&lt;/h3&gt;

&lt;p&gt;As you can see in the above image, we are able to pull from the Strava API segment effort data for the user to view additional metrics on how well they performed during their effort.&lt;/p&gt;

&lt;h3 id=&#34;final-thesis-presentations&#34;&gt;Final Thesis Presentations&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s very hard to boil down three weeks of work into a simple 3 minute presentation, but fortunately I was paired with not only incredible developers, but excellent communicators. You can find our presentation &lt;a href=&#34;https://www.youtube.com/watch?v=sw_mcAhgQo4&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Only one more week until class is over! Onward to hiring week.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hack Reactor Week 10</title>
      <link>http://justinzimmerman.net/post/hack-reactor-week-10/</link>
      <pubDate>Sun, 20 Dec 2015 20:42:22 -0400</pubDate>
      <author>justin.richard.zimmerman@gmail.com (Justin Zimmerman)</author>
      <guid>http://justinzimmerman.net/post/hack-reactor-week-10/</guid>
      <description>

&lt;p&gt;With Thesis moving along very nicely, here is what happened in week 10!&lt;/p&gt;

&lt;h3 id=&#34;authentication&#34;&gt;Authentication&lt;/h3&gt;

&lt;p&gt;One of the challenges faced this week during thesis is removing API keys from the client side. With a mobile application, you should consider all of your code accessible for the world to see. This would allow for any user to view your API&amp;rsquo;s secret key allowing other user&amp;rsquo;s to make (potentially) malicious requests to the API. This should of course, be avoided at all costs.&lt;/p&gt;

&lt;p&gt;We reimplemented the authentication to be completely server side. To do this, we used passport.js and JSON Web Tokens. The client will send the JWT to the server on each request. Once sent, the server will then intercept the request, making sure the user has a valid token and that the token hasn&amp;rsquo;t expired yet.&lt;/p&gt;

&lt;p&gt;This was a great learning experience for the entire team, and one that certainly helped us better understand token-based authentication.&lt;/p&gt;

&lt;h3 id=&#34;bestrida&#34;&gt;Bestrida&lt;/h3&gt;

&lt;p&gt;We have finally made it to MVP! The server creates challenges, the user can view and accept these challenges, and we can finally declare a winner based off live Strava data. This has been a very challenging but rewarding process for the entire team, and we are so excited to show off our product to potential employers.&lt;/p&gt;

&lt;p&gt;With next week being a solo week for Christmas vacation, I will post again in 2016!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>On Whiteboarding: Triggers</title>
      <link>http://justinzimmerman.net/post/on-whiteboarding-triggers/</link>
      <pubDate>Sun, 13 Dec 2015 10:37:06 -0400</pubDate>
      <author>justin.richard.zimmerman@gmail.com (Justin Zimmerman)</author>
      <guid>http://justinzimmerman.net/post/on-whiteboarding-triggers/</guid>
      <description>

&lt;p&gt;I will be the first to admit, I struggle in whiteboarding situations, especially in the context of technical interviewing when triggers arise. I hope this post helps you become better at whiteboarding when these certain triggers occur.&lt;/p&gt;

&lt;p&gt;I have recognized that there are two types of triggers that happen while whiteboarding. The first trigger is an interpersonal trigger that I will call a &lt;strong&gt;&amp;ldquo;spiraling&amp;rdquo;&lt;/strong&gt; trigger. The next is an external trigger that I will call a &lt;strong&gt;&amp;ldquo;questioning&amp;rdquo;&lt;/strong&gt; trigger.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s dive into what each of the triggers are and what we can do about them.&lt;/p&gt;

&lt;h3 id=&#34;spiraling-triggers&#34;&gt;Spiraling Triggers&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://i.giphy.com/T1qCytOwqL6A8.gif&#34; alt=&#34;Spiral&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This first type of trigger is what happens when our plan starts to &amp;ldquo;spiral downward&amp;rdquo; and ultimately fall apart the moment when we realize our initial solution to the problem &lt;em&gt;isn&amp;rsquo;t&lt;/em&gt; going to work.&lt;/p&gt;

&lt;p&gt;When I first started attempting technical questions, or what I like to call &lt;em&gt;&amp;ldquo;toy problems&amp;rdquo;&lt;/em&gt;, spiraling triggers were the demise of many solutions. So what can we do about them?&lt;/p&gt;

&lt;p&gt;The first step is &lt;strong&gt;recognizing&lt;/strong&gt; that you have started to spiral downward. It seems like something obvious right? Maybe not at first to the unexperienced.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Thoughts of &amp;ldquo;Oh man, my solution doesn&amp;rsquo;t work. I can&amp;rsquo;t solve this. What am I even doing here? I can&amp;rsquo;t believe I am wasting this interviewers time!&amp;rdquo; can easily start creeping into the mind.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We need to recognize when the spiraling starts, and quickly break out of it. &lt;strong&gt;Take a deep breath, and stand up straight.&lt;/strong&gt; Seriously. It helps.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.giphy.com/3o85xGwYPfshlyYLCM.gif&#34; alt=&#34;sigh&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We need to get oxygen back into our brains and start thinking down the correct path again. Wasting brain power on how we aren&amp;rsquo;t solving the problem won&amp;rsquo;t help us find a solution.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t worry though, if we can recognize our spiraling, it becomes much easier to break out of the spiral after some practice.&lt;/p&gt;

&lt;p&gt;After taking a breath, start thinking of what new information has been introduced. This segues nicely into the next trigger.&lt;/p&gt;

&lt;h3 id=&#34;questioning-triggers&#34;&gt;Questioning Triggers&lt;/h3&gt;

&lt;p&gt;This next type of trigger is a &lt;strong&gt;questioning trigger&lt;/strong&gt;. This occurs when new information is provided by the interviewer, or a new realization modifies our understanding of the problem.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If an interviewer asks &amp;ldquo;Does that work?&amp;rdquo; or &amp;ldquo;Is that right?&amp;rdquo; consider it a questioning trigger.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here are a few steps when approached with a questioning trigger.&lt;/p&gt;

&lt;p&gt;####1. Amend the current line of pseudocode&lt;/p&gt;

&lt;p&gt;Okay, maybe this isn&amp;rsquo;t as earth shattering as we might have hoped, but do not overlook this simple strategy. For me, when a &lt;em&gt;questioning trigger&lt;/em&gt; occurs, I think of a solution and want to rush to the beginning of my pseudocode and start changing everything from the beginning.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.giphy.com/BfBqQV47hLFh6.gif&#34; alt=&#34;best idea&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is actually counter productive and will hamper our ability to solve the problem.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What&amp;rsquo;s the big deal? By the time we get back to the current line of pseudocode, we&amp;rsquo;ve forgotten our epiphany making it harder for us to move forward.&lt;/p&gt;

&lt;p&gt;####2. Visualize the conflicting information&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s say our toy problem requires us to traverse a tree and we find a flaw in our logic. Trees are excellent opportunities to visualize what our data looks like.&lt;/p&gt;

&lt;p&gt;For instance, we realize our solution won&amp;rsquo;t traverse left nodes if right nodes of the tree have data in them. Let&amp;rsquo;s visualize examples of edge cases.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;USEFUL DIAGRAM!
      (N)
    /      \
  (Null)    (RC)
            /
          (LC2)

USEFUL DIAGRAM!
      (N)
    /      \
  (LC)    (Null)

USEFUL DIAGRAM!
      (N)
    /      \
  (Null)    (Null)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we can visualize different edge cases, it will be a lot easier to incorporate solutions into our pseudocode.&lt;/p&gt;

&lt;p&gt;####3. Create new example data&lt;/p&gt;

&lt;p&gt;After visualizing the new information, our next step is to create example data to help solve the problem.&lt;/p&gt;

&lt;p&gt;If we realize our problem needs a function that will require a callback to store data asynchronously, think of example data that we can provide to our solution.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  asyncMap([
   function(cb){
     setTimeout(function(){
       cb(&#39;one&#39;);
     }, 200);
   },
   function(cb){
     setTimeout(function(){
       cb(&#39;two&#39;);
    }, 100);
   }
  ],
   function(results){
     // the results array will equal [&#39;one&#39;,&#39;two&#39;] even though
     // the second function had a shorter timeout.
     console.log(results); // [&#39;one&#39;, &#39;two&#39;]
 });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Write an example function, include an example timeout length, and example data that results from the function.&lt;/p&gt;

&lt;p&gt;It is imperative that our example data includes edge cases. The more edge cases we add to our example data, the easier finding a solution will be.&lt;/p&gt;

&lt;p&gt;####4. Step through pseudocode with example data&lt;/p&gt;

&lt;p&gt;This is a critical step that I am continuing to work on while solving toy problems.&lt;/p&gt;

&lt;p&gt;We want to write in-line pseudocode as if we were the compiler. Using our example data created in the previous step, iterate through each line of the pseudocode. We want to write down what our variables store at each pass.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// after 100ms
// 2
// counter = 1
// result = [,,&#39;one&#39;]
// check if 1 === 2 -&amp;gt; false


// after 200ms
// 2
// counter = 2
// result = [,, &#39;two&#39;]
// check if 2 === 2 -&amp;gt; true
		// callback(result) Boom! // -&amp;gt; [&#39;one, &#39;two&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This allows us even greater insight to any flaws within our pseudocode.&lt;/p&gt;

&lt;p&gt;####5. Finish pseudocode completely before rushing to write code&lt;/p&gt;

&lt;p&gt;When I figure out part of the solution, I get excited and want to start coding right away. From experience, I can safely say this is the best way to run into additional problems.&lt;/p&gt;

&lt;p&gt;We want to be sure to finish iterating through pseudocode with our example data from step 4. This allows us to get a better idea of what exactly needs to happen to solve the problem, and write correct code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We want to make our pseudocode a cheat sheet, not a general overview.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When in whiteboarding situations, we only want to be doing 2 out of 3 tasks at all times:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;thinking&lt;/li&gt;
&lt;li&gt;writing&lt;/li&gt;
&lt;li&gt;talking&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When we do more than 2 of these things at once, we are at risk of spiraling. This is why it is important that we have complete pseudocode before we start coding. We now only have to worry about the last 2 points: &lt;strong&gt;writing&lt;/strong&gt; and &lt;strong&gt;talking&lt;/strong&gt; when writing actual code.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.giphy.com/mNpgNpZmflO3S.gif&#34; alt=&#34;everything&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Thanks for taking the time to read this lengthy post. If you can remember these steps I guarantee you will not only come to a solution, but impress your interviewer along the way.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hack Reactor Week 9</title>
      <link>http://justinzimmerman.net/post/hack-reactor-week-09/</link>
      <pubDate>Sun, 13 Dec 2015 09:50:22 -0400</pubDate>
      <author>justin.richard.zimmerman@gmail.com (Justin Zimmerman)</author>
      <guid>http://justinzimmerman.net/post/hack-reactor-week-09/</guid>
      <description>

&lt;p&gt;Week 9 is finished at Hack Reactor, and thesis projects are in full swing! While there aren&amp;rsquo;t many things on the schedule, thesis is all about trying to build the best product in the 3 short weeks you have dedicated to it.&lt;/p&gt;

&lt;h3 id=&#34;thesis&#34;&gt;Thesis&lt;/h3&gt;

&lt;p&gt;To start, this is a perfect summary of life during thesis:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/wJ4IcDJ.gif&#34; alt=&#34;thesis&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Have no fear, little buddy.&lt;/p&gt;

&lt;p&gt;While building a product can feel this way sometimes, I am having an awesome time learning and problem solving to create the best app we can possibly produce.&lt;/p&gt;

&lt;p&gt;For our thesis project, my group has decided to build upon Strava&amp;rsquo;s extensive API. We are seriously fortunate to have such a great API to leverage for our product!&lt;/p&gt;

&lt;p&gt;With that being said, here is a little bit about Bestrida.&lt;/p&gt;

&lt;h3 id=&#34;bestrida&#34;&gt;Bestrida&lt;/h3&gt;

&lt;p&gt;The name pays homage to Strava by also leaning upon it Swedish vocabulary. Strava is swedish for &amp;ldquo;to strive&amp;rdquo;, while Bestrida is swedish for &amp;ldquo;to challenge&amp;rdquo;. Which is exactly what our app does.&lt;/p&gt;

&lt;p&gt;Bestrida will allow a user to challenge anyone they follow to a particular segment. The user will pick a person to challenge, a segment, and a date the challenge will be completed.&lt;/p&gt;

&lt;p&gt;All of my friends are great to ride with, but like most cyclists, they are also always up for a short sprint through a well known Strava segment. This application will take your casual ride with friends to a whole new level.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s all for this week. Next week I will continue to describe Bestrida, and discuss topics learned along the way.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hack Reactor Week 8</title>
      <link>http://justinzimmerman.net/post/hack-reactor-week-08/</link>
      <pubDate>Sun, 06 Dec 2015 09:13:49 -0400</pubDate>
      <author>justin.richard.zimmerman@gmail.com (Justin Zimmerman)</author>
      <guid>http://justinzimmerman.net/post/hack-reactor-week-08/</guid>
      <description>

&lt;h3 id=&#34;legacy-project&#34;&gt;Legacy Project&lt;/h3&gt;

&lt;p&gt;After the greenfield project last week, the next exercise was picking another group&amp;rsquo;s greenfield project to build upon.&lt;/p&gt;

&lt;p&gt;The idea of this exercise is actually well founded, the majority of Software Engineers are going to work on developing new features or debugging &amp;lsquo;legacy&amp;rsquo; code, or known as code you haven&amp;rsquo;t seen before.&lt;/p&gt;

&lt;p&gt;I really enjoyed working on Seamless, the greenfield project my group decided to take on. The foundation of seamless was solid, it was a basic vanilla JavaScript application, that resized an image using a seam-carving algorithm.&lt;/p&gt;

&lt;p&gt;We decided to create a persistent data store for resized images using Firebase, add google authentication, and to also create a modern, responsive website.&lt;/p&gt;

&lt;p&gt;You can view &lt;a href=&#34;http://hrr9-seamless.herokuapp.com&#34;&gt;Seamless here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;thesis&#34;&gt;Thesis&lt;/h3&gt;

&lt;p&gt;I cannot believe it is already time to start the thesis project! The thesis project is a 3.5 week long project in a group of 4.&lt;/p&gt;

&lt;p&gt;The group I was assigned to didn&amp;rsquo;t come with a recommended project. I have a feeling this will be not only a great group, but a great project will come out of it as well!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hack Reactor Week 7</title>
      <link>http://justinzimmerman.net/post/hack-reactor-week-07/</link>
      <pubDate>Sun, 22 Nov 2015 09:13:41 -0400</pubDate>
      <author>justin.richard.zimmerman@gmail.com (Justin Zimmerman)</author>
      <guid>http://justinzimmerman.net/post/hack-reactor-week-07/</guid>
      <description>

&lt;p&gt;Week 7 was the first week of &amp;ldquo;project phase&amp;rdquo; in Hack Reactor. We will go through 6 weeks of group work to become better engineers in team environments.&lt;/p&gt;

&lt;h4 id=&#34;greenfield&#34;&gt;Greenfield&lt;/h4&gt;

&lt;p&gt;The term greenfield comes from the engineering world, to refer to a blank slate, a &amp;ldquo;green field&amp;rdquo; ready to be built upon.&lt;/p&gt;

&lt;p&gt;This was my first experience working with a team of four to complete a functioning project. While I greatly enjoyed working in a team environment, there were a few hiccups that we encountered and have learned from along the way.&lt;/p&gt;

&lt;p&gt;My understanding of git was taken to an entire new level. This was a great experience in to learning the intricacies of git workflow and project management.&lt;/p&gt;

&lt;p&gt;My team developed &lt;a href=&#34;http://access-app.herokuapp.com/&#34;&gt;Access&lt;/a&gt;. We used the MEAN stack to store and display crowd-sourced handicapped accessibility information for venues. We hope that with a little more work, this functioning product will become a way for people to easily access the information they need to go places, and live their lives.&lt;/p&gt;

&lt;h4 id=&#34;resume&#34;&gt;Resume&lt;/h4&gt;

&lt;p&gt;The resume sprint was one of the first experiences with Hack Reactor&amp;rsquo;s excellent outcomes team. The outcomes team works hard to take you from a great programmer, to a hirable programmer.&lt;/p&gt;

&lt;p&gt;While at first glance,most people do not consider a resume to be worth taking multiple days of a course, but its actually quite the opposite. A resume, as I am sure most of you know, is the first thing a recruiter or hiring manager will see. What is a less common for people to understand, is much like the cover letter, you should write your resume with the position in mind.&lt;/p&gt;

&lt;p&gt;One of the hardest parts of writing an effective resume, is not writing every accomplishment down. Every single line in your resume should announce to the reader, that you are a qualified software engineer.&lt;/p&gt;

&lt;p&gt;While you might have had several accomplishments in your previous profession, if they do not directly show how great a programmer you are or how you are able to get things done, those achievements should be omitted.&lt;/p&gt;

&lt;p&gt;Thanks for reading! Time for a relaxing solo week, and onward to week 8 and legacy projects!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hack Reactor Week 6</title>
      <link>http://justinzimmerman.net/post/hack-reactor-week-06/</link>
      <pubDate>Sun, 15 Nov 2015 09:13:25 -0400</pubDate>
      <author>justin.richard.zimmerman@gmail.com (Justin Zimmerman)</author>
      <guid>http://justinzimmerman.net/post/hack-reactor-week-06/</guid>
      <description>

&lt;p&gt;Week 6 at Hack Reactor is when curriculum starts to shift from small &amp;ldquo;sprints&amp;rdquo; to the larger project phase. For the first time at Hack Reactor, we were given a React.js sprint! After the React.js sprint we had two days to create our MVP projects. At the end of the week, we had the dreaded hiring assessment.&lt;/p&gt;

&lt;h4 id=&#34;react-js&#34;&gt;React.js&lt;/h4&gt;

&lt;p&gt;This was probably one of my favorite sprints thus far. Using React to manage state, we created a &lt;a href=&#34;https://jz-jukebox.herokuapp.com/&#34;&gt;jukebox&lt;/a&gt; application that leverages the SoundCloud API. Using underscore&amp;rsquo;s debounce function, when a user inputs a keyword, the user is shown 10 songs that fit the keyword.&lt;/p&gt;

&lt;h4 id=&#34;mvps&#34;&gt;MVPs&lt;/h4&gt;

&lt;p&gt;The MVP is all about finding the right idea, with the right scope, and pushing through to deploy a minimum viable product, in just two days. I created &lt;a href=&#34;https://geotinerary.herokuapp.com/#/&#34;&gt;Geotinerary&lt;/a&gt; using Angular, Firebase, Leaflet, and Mapbox.js. This was a very fun project that I hope to have more time to polish up.&lt;/p&gt;

&lt;h4 id=&#34;hiring-assessment&#34;&gt;Hiring Assessment&lt;/h4&gt;

&lt;p&gt;The hiring assessment is a 6 hour test encompassing everything the has been taught up until this point of the curriculum. While I won&amp;rsquo;t ruin any surprises for future students, I will recommend anyone who is worried about the hiring assessment to review previous self assessments up until this point.&lt;/p&gt;

&lt;p&gt;While this is certainly an important step in Hack Reactor, do not stress about this. Trust that Hack Reactor has prepared you for this assessment, because that was definitely the case for me.&lt;/p&gt;

&lt;p&gt;Onward to the group project phase! Thanks for reading everyone.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Geolocation on Page Load</title>
      <link>http://justinzimmerman.net/post/geolocation-on-page-load/</link>
      <pubDate>Thu, 12 Nov 2015 10:31:44 -0400</pubDate>
      <author>justin.richard.zimmerman@gmail.com (Justin Zimmerman)</author>
      <guid>http://justinzimmerman.net/post/geolocation-on-page-load/</guid>
      <description>

&lt;p&gt;While building &lt;a href=&#34;https://geotinerary.herokuapp.com/&#34;&gt;Geotinerary&lt;/a&gt;, I wanted the map to zoom relatively close to the users location. Surprisingly enough, this was quite hard to find an example of.&lt;/p&gt;

&lt;h4 id=&#34;html5-and-ips&#34;&gt;HTML5 and IPs&lt;/h4&gt;

&lt;p&gt;Traditionally, when a webpage wants your location, we use the native HTML5. While this isn&amp;rsquo;t a terrible idea and can have much more accurate results, there is another method to find your users location that doesn&amp;rsquo;t require the use of HTML5 geolocation, the users IP address.&lt;/p&gt;

&lt;h4 id=&#34;html5-geolocation&#34;&gt;HTML5 Geolocation&lt;/h4&gt;

&lt;p&gt;The most accurate approach to locating your users is to use HTML 5&amp;rsquo;s built in geolocation feature. Due to the accuracy, this is the approach I opted to use for Geotinerary.&lt;/p&gt;

&lt;p&gt;Here is a code snippet for HTML 5 Geolocation:&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/jrzimmerman/c4039796cfaa84980cbe.js&#34;&gt;&lt;/script&gt;

&lt;h4 id=&#34;geolocating-ip-addresses&#34;&gt;Geolocating IP Addresses&lt;/h4&gt;

&lt;p&gt;If you are concerned with There are a swath of many great GeoIP providers, but for this project I decided upon &lt;a href=&#34;http://freegeoip.net/&#34;&gt;Free GeoIP&lt;/a&gt; for its open data and ease of use. While the location is not as great, it&amp;rsquo;s all about what you need from your data.&lt;/p&gt;

&lt;p&gt;Here is a code snippet for Geolocating IP Addresses:&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/jrzimmerman/0453bdfd552de42f30f6.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Deciding upon which method to use depends on use case. Since I had a need for specific locations, I went with the traditional HTML 5 geolocation. If I were to aggregate data at a national (or global) scale, then GeoIP is a fantastic use.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hack Reactor Week 5</title>
      <link>http://justinzimmerman.net/post/hack-reactor-week-05/</link>
      <pubDate>Sun, 08 Nov 2015 09:12:55 -0400</pubDate>
      <author>justin.richard.zimmerman@gmail.com (Justin Zimmerman)</author>
      <guid>http://justinzimmerman.net/post/hack-reactor-week-05/</guid>
      <description>

&lt;p&gt;With another week completed, week 5 has been extremely interesting. The topics this week included authentication, and deployment, along with introductions to MongoDB and Angular.&lt;/p&gt;

&lt;h4 id=&#34;authentication&#34;&gt;Authentication&lt;/h4&gt;

&lt;p&gt;As we all know, security is a pivotal part of development. Authentication is the act of verifying that your user is actually who they say they are. This verification normally includes a username and password. When that password is passed to the server we then return a token for return authentication requests.&lt;/p&gt;

&lt;h4 id=&#34;deployment&#34;&gt;Deployment&lt;/h4&gt;

&lt;p&gt;Learning deployment has been very fun, and I have really enjoyed leveraging services like &lt;a href=&#34;http://www.heroku.com&#34;&gt;Heroku&lt;/a&gt; to make deployment easy as possible. Along with deployment, we talked about using build task runners such as Grunt and Gulp.&lt;/p&gt;

&lt;h4 id=&#34;angular&#34;&gt;Angular&lt;/h4&gt;

&lt;p&gt;Angular is an excellent framework that I was able to work with at the end of the week. Unlike Backbone, Angular is quite opinionated, in a good way. Angular has thorough documentation, and has promises built in, to handle callbacks.&lt;/p&gt;

&lt;p&gt;With only one more sprint next week, the transition to group project phase begins!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hack Reactor Week 4</title>
      <link>http://justinzimmerman.net/post/hack-reactor-week-04/</link>
      <pubDate>Sun, 01 Nov 2015 08:58:08 -0400</pubDate>
      <author>justin.richard.zimmerman@gmail.com (Justin Zimmerman)</author>
      <guid>http://justinzimmerman.net/post/hack-reactor-week-04/</guid>
      <description>

&lt;p&gt;In Hack Reactor, week 4 is a pivotal time where the training wheels start to come off. Much of the sprints until week 4 have had for the most part very structured tests that held your hand through most of the sprints. Week 4 starts to look quite different!&lt;/p&gt;

&lt;p&gt;During week 4 we took a walk through server-side or what is also called back-end concepts. We specifically focused on using node, server side concepts such as the client-server model, and databases.&lt;/p&gt;

&lt;h4 id=&#34;node-js&#34;&gt;Node.js&lt;/h4&gt;

&lt;p&gt;Node.js is a javascript runtime environment that allows for event-driven programming in an asynchronous environment.&lt;/p&gt;

&lt;h4 id=&#34;server-side-concepts&#34;&gt;Server Side Concepts&lt;/h4&gt;

&lt;p&gt;We discussed server side concepts such as the Client-Server model, background jobs, daemons, and cron tasks.&lt;/p&gt;

&lt;h4 id=&#34;databases&#34;&gt;Databases&lt;/h4&gt;

&lt;p&gt;In my previous job, maintenance of databases was a large portion of my daily tasks. So for this sprint I was able to take my previous experience and learn so much more.&lt;/p&gt;

&lt;p&gt;To take a step backwards, databases are so important because of their ability to store data persistently. Should your node server restart, without a database you can say goodbye to all that beautiful data!&lt;/p&gt;

&lt;p&gt;On to week 5!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>