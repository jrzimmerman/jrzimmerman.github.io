<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on Justin Zimmerman</title>
    <link>https://jrzimmerman.github.io/tags/development/</link>
    <description>Recent content in Development on Justin Zimmerman</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Justin Zimmerman</copyright>
    <lastBuildDate>Sun, 04 Sep 2016 22:35:35 -0400</lastBuildDate>
    <atom:link href="https://jrzimmerman.github.io/tags/development/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Bestrida</title>
      <link>https://jrzimmerman.github.io/post/bestrida/</link>
      <pubDate>Sun, 04 Sep 2016 22:35:35 -0400</pubDate>
      
      <guid>https://jrzimmerman.github.io/post/bestrida/</guid>
      <description>

&lt;p&gt;I recently published &lt;a href=&#34;https://appsto.re/us/lBRCeb.i&#34;&gt;Bestrida&lt;/a&gt; to the iOS app store for my submission to the 2016 Strava Developer Challenge. Here is a brief overview of the application. Strava.com is a popular and widely used website and mobile app that over one million cyclists and runners use to track their activity via GPS. Whenever you go for a run or ride your bike, Strava will track and store your activity and provide you with useful statistics. As awesome as it is, a major thing Strava does not offer is a way to challenge your friends.&lt;/p&gt;

&lt;h3 id=&#34;bestrida&#34;&gt;Bestrida&lt;/h3&gt;

&lt;p&gt;Bestrida, swedish translation &amp;ldquo;to challenge&amp;rdquo;, is a Strava.com segment based application that allows you to challenge your friends to running and cycling segments. With the chaotic schedules many of us have, it’s hard to carve out time to actually meet up with a friend and go for a run or ride. Your friends no longer have an excuse to keep dodging your challenges just because you&amp;rsquo;re an Ironman and they’re a weekend warrior. You can challenge your friends using the app, anytime, anywhere.&lt;/p&gt;

&lt;h3 id=&#34;challenge-feed&#34;&gt;Challenge Feed&lt;/h3&gt;

&lt;p&gt;After logging in, the user is presented with the Challenge Feed. The Challenge Feed aggregates all of the challenges that the user has received from other users and challenges that the user has sent out to their friends. The user can click on a particular challenge and preview the segment for that challenge. Here we can see the relevant metrics for this segment. The user can also have the option to cancel the challenge. Users can accept or decline challenges from the feed as well.&lt;/p&gt;

&lt;h3 id=&#34;create-challenge&#34;&gt;Create Challenge&lt;/h3&gt;

&lt;p&gt;At the top of the screen, the user can click on the “Create Challenge” button to create a new challenge. To create a challenge, the user will first select a challenger. They have the option to either select from a list of their 3 most frequently challenged friends or search from the list of their Strava friends to challenge. The user will then select a segment. Similar to selecting a challenger, the user will have the option to either select from a list of their 3 most frequently completed segments or search for starred or recently completed segments. The last step is to select a completion date which acts like an expiration date by which both users must complete that particular challenge. Once the challenge has been created and accepted by the other user, it will be displayed on the “Active Challenges” tab.&lt;/p&gt;

&lt;h3 id=&#34;active-challenges&#34;&gt;Active Challenges&lt;/h3&gt;

&lt;p&gt;In the “Active Challenges” tab, the user can view a list of all active challenges, which are challenges that have been accepted
by both parties. The Active Challenge feed has the opponent, the segment, and the completion date. You can click on the
active challenge to view more detailed information about that particular challenge.&lt;/p&gt;

&lt;p&gt;Once the user completes an activity on Strava that covers the segment, the user can click in to the Active Challenge Detail view to complete the challenge.&lt;/p&gt;

&lt;h3 id=&#34;completed-challenges&#34;&gt;Completed Challenges&lt;/h3&gt;

&lt;p&gt;Once the challenge is completed, the user can view the Completed Challenge feed to see whether they have won, lost, or are waiting for their opponent to complete the challenge. When the challenge is completed by both parties, you can see whether you won or lost, the segment name, the distance and specific details about the user and their opponent including completion time, heart rate, cadence, and wattage during the segment.&lt;/p&gt;

&lt;p&gt;This application was built with React Native, and Node, with a Mongo database to store users, segments, and challenges.&lt;/p&gt;

&lt;p&gt;Thanks for reading. Download &lt;a href=&#34;https://appsto.re/us/lBRCeb.i&#34;&gt;Bestrida&lt;/a&gt; today to start challenging your friends and improving your workouts and segment times!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Updating Feature Coordinates With Python</title>
      <link>https://jrzimmerman.github.io/post/updating-feature-coordinates-with-python/</link>
      <pubDate>Fri, 08 May 2015 21:41:19 -0400</pubDate>
      
      <guid>https://jrzimmerman.github.io/post/updating-feature-coordinates-with-python/</guid>
      <description>&lt;p&gt;I was asked to update the location of manhole points with new survey data. Traditionally this is a long task, dragging the old manholes to their new locations.&lt;/p&gt;

&lt;p&gt;Before we assume how it would be so much easier to just delete the old data, and import the new data. First we have to consider all the attribute information associated with the data, sure we can join based on the Manhole ID but what happens when we have to worry about attachments?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Luckily, python makes this an easy task.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Example: You have a feature class called ‘Manholes’ that has 500 point features. You received a new XY table that has updated locations for 103 points. Update the point locations by doing the following:&lt;/p&gt;

&lt;p&gt;[1.] Add point feature class and the Table as a dbf/event(updated xy) layer to ArcMap and do a &amp;lsquo;Field join&amp;rsquo; based on a unique identifier, ours is the Manhole ID field, this will join the data from the table permanently to the feature.&lt;/p&gt;

&lt;p&gt;[2.] Open attribute table of the feature class and select the records/features which should move to updated XY locations.&lt;/p&gt;

&lt;p&gt;[3.] Right click on the Shape column and open Field Calculator.&lt;/p&gt;

&lt;p&gt;[4.] In the Field Calculator select Python Parser. Check Show Codeblock&lt;/p&gt;

&lt;p&gt;Copy following script in the Pre-Logic Script Code window&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def XYsetVALUE( shape, X_value, Y_value):
point = shape.getPart(0)
point.X = X_value
point.Y = Y_value
return point
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the window below &amp;lsquo;Shape=&amp;rsquo; copy following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;XYsetVALUE ( !SHAPE!, !X_COORD!, !Y_COORD! )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here you will need to modify &lt;code&gt;!X_COORD!&lt;/code&gt; and &lt;code&gt;!Y_COORD!&lt;/code&gt; to match the names of your coordinate columns.&lt;/p&gt;

&lt;p&gt;E.g. If the name of the column containing X coordinate values is &amp;lsquo;POINT_X&amp;rsquo; and that of Y coordinte values is &amp;lsquo;POINT_Y&amp;rsquo; the script would be&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;XYsetVALUE ( !SHAPE!, !POINT_X!, !POINT_Y! )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In my case it was &lt;code&gt;XYsetVALUE ( !SHAPE!, !X!, !Y! )&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;[5.] Click ok&lt;/p&gt;

&lt;p&gt;[6.] Now right click on the OLD XY and Calculate Geometry for XY and the updated XY will be calculated.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Turf.js</title>
      <link>https://jrzimmerman.github.io/post/turf-js/</link>
      <pubDate>Tue, 10 Mar 2015 08:13:21 -0400</pubDate>
      
      <guid>https://jrzimmerman.github.io/post/turf-js/</guid>
      <description>

&lt;p&gt;Over the winter I was able to spend some free time assisting with the development of the &lt;a href=&#34;http://turfjs.org/&#34;&gt;Turf.js&lt;/a&gt; project!&lt;/p&gt;

&lt;p&gt;This was a very rewarding experience that has allowed me to better grasp some very important topics:&lt;/p&gt;

&lt;h3 id=&#34;test-driven-development&#34;&gt;Test Driven Development&lt;/h3&gt;

&lt;p&gt;Test driven development is one of the most powerful concepts I picked up while working with Turf. Turf uses the &lt;a href=&#34;https://github.com/substack/tape&#34;&gt;Tape&lt;/a&gt; testing environment, and just like turf, focuses on being lightweight and fast.&lt;/p&gt;

&lt;h3 id=&#34;documentation&#34;&gt;Documentation&lt;/h3&gt;

&lt;p&gt;Good documentation is hard. Thanks to Tom, Morgan, Lyzi at Mapbox for providing amazing documentation for Turf, and turf would be a very different community without the substantial work completed.&lt;/p&gt;

&lt;h3 id=&#34;modular&#34;&gt;Modular&lt;/h3&gt;

&lt;p&gt;It is so cool that Turf is modular, branching all of its separate components into different modules is simple, lightweight, and fast! The added benefit is that it helps with error checking as well as the many other benefits of abstraction on projects.&lt;/p&gt;

&lt;p&gt;Thanks so much to the Turf team for the wonderful learning experiences they have provided.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Visualizing Map Service Usage</title>
      <link>https://jrzimmerman.github.io/post/visualizing-map-service-usage/</link>
      <pubDate>Thu, 24 Oct 2013 21:43:29 -0400</pubDate>
      
      <guid>https://jrzimmerman.github.io/post/visualizing-map-service-usage/</guid>
      <description>

&lt;p&gt;I recently developed a &lt;a href=&#34;http://75.151.252.249/RichlandHeatmap/&#34;&gt;JavaScript web application&lt;/a&gt; to visualize incident reporting for a local municipality collecting &lt;a href=&#34;http://75.151.252.249/RichlandServiceRequest/&#34;&gt;Stormwater Incident Reports&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jrzimmerman.github.io/img/richlandheatmap.png&#34; alt=&#34;Richland Service Request&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The idea behind this application, will be to determine the usage of the reporting system, and to additionally determine &amp;ldquo;Problem Areas&amp;rdquo; for further corrective action planning.&lt;/p&gt;

&lt;h3 id=&#34;importance-of-dynamic-display&#34;&gt;Importance of Dynamic Display&lt;/h3&gt;

&lt;p&gt;One of the most important considerations for determining areas, is to determine the scale. The scale the data is viewed at can change the data is interpreted.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jrzimmerman.github.io/img/smallscale.png&#34; alt=&#34;Small Scale&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Small scale cannot accurately depict areas.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jrzimmerman.github.io/img/largescale.png&#34; alt=&#34;Large Scale&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Large scale does not allow for a focused approach to specific areas.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jrzimmerman.github.io/img/justright.png&#34; alt=&#34;Just Right&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Just right. This scale provides a few areas that are easily identifiable.&lt;/p&gt;

&lt;h3 id=&#34;errors&#34;&gt;Errors&lt;/h3&gt;

&lt;p&gt;Be mindful of particular input errors. These include multiple responses from a single resident, which can skew how the data is depicted.&lt;/p&gt;

&lt;h3 id=&#34;how-can-i-make-this&#34;&gt;How can I make this?&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;http://solutions.arcgis.com/&#34;&gt;ArcGIS Solutions&lt;/a&gt; are full of templates that can be modified for your use. I prefer to check out their &lt;a href=&#34;https://github.com/Esri&#34;&gt;GitHub&lt;/a&gt; account for all the latest templates.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>