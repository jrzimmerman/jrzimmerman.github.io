<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on Justin Zimmerman</title>
    <link>http://justinzimmerman.net/tags/development/</link>
    <description>Recent content in Development on Justin Zimmerman</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>justin.richard.zimmerman@gmail.com (Justin Zimmerman)</managingEditor>
    <webMaster>justin.richard.zimmerman@gmail.com (Justin Zimmerman)</webMaster>
    <copyright>(c) 2016 Justin Zimmerman.</copyright>
    <lastBuildDate>Fri, 08 May 2015 21:41:19 -0400</lastBuildDate>
    <atom:link href="http://justinzimmerman.net/tags/development/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Updating Feature Coordinates With Python</title>
      <link>http://justinzimmerman.net/post/updating-feature-coordinates-with-python/</link>
      <pubDate>Fri, 08 May 2015 21:41:19 -0400</pubDate>
      <author>justin.richard.zimmerman@gmail.com (Justin Zimmerman)</author>
      <guid>http://justinzimmerman.net/post/updating-feature-coordinates-with-python/</guid>
      <description>&lt;p&gt;I was asked to update the location of manhole points with new survey data. Traditionally this is a long task, dragging the old manholes to their new locations.&lt;/p&gt;

&lt;p&gt;Before we assume how it would be so much easier to just delete the old data, and import the new data. First we have to consider all the attribute information associated with the data, sure we can join based on the Manhole ID but what happens when we have to worry about attachments?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Luckily, python makes this an easy task.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Example: You have a feature class called ‘Manholes’ that has 500 point features. You received a new XY table that has updated locations for 103 points. Update the point locations by doing the following:&lt;/p&gt;

&lt;p&gt;[1.] Add point feature class and the Table as a dbf/event(updated xy) layer to ArcMap and do a &amp;lsquo;Field join&amp;rsquo; based on a unique identifier, ours is the Manhole ID field, this will join the data from the table permanently to the feature.&lt;/p&gt;

&lt;p&gt;[2.] Open attribute table of the feature class and select the records/features which should move to updated XY locations.&lt;/p&gt;

&lt;p&gt;[3.] Right click on the Shape column and open Field Calculator.&lt;/p&gt;

&lt;p&gt;[4.] In the Field Calculator select Python Parser. Check Show Codeblock&lt;/p&gt;

&lt;p&gt;Copy following script in the Pre-Logic Script Code window&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def XYsetVALUE( shape, X_value, Y_value):
point = shape.getPart(0)
point.X = X_value
point.Y = Y_value
return point
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the window below &amp;lsquo;Shape=&amp;rsquo; copy following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;XYsetVALUE ( !SHAPE!, !X_COORD!, !Y_COORD! )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here you will need to modify &lt;code&gt;!X_COORD!&lt;/code&gt; and &lt;code&gt;!Y_COORD!&lt;/code&gt; to match the names of your coordinate columns.&lt;/p&gt;

&lt;p&gt;E.g. If the name of the column containing X coordinate values is &amp;lsquo;POINT_X&amp;rsquo; and that of Y coordinte values is &amp;lsquo;POINT_Y&amp;rsquo; the script would be&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;XYsetVALUE ( !SHAPE!, !POINT_X!, !POINT_Y! )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In my case it was &lt;code&gt;XYsetVALUE ( !SHAPE!, !X!, !Y! )&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;[5.] Click ok&lt;/p&gt;

&lt;p&gt;[6.] Now right click on the OLD XY and Calculate Geometry for XY and the updated XY will be calculated.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Turf.js</title>
      <link>http://justinzimmerman.net/post/turf-js/</link>
      <pubDate>Tue, 10 Mar 2015 08:13:21 -0400</pubDate>
      <author>justin.richard.zimmerman@gmail.com (Justin Zimmerman)</author>
      <guid>http://justinzimmerman.net/post/turf-js/</guid>
      <description>

&lt;p&gt;Over the winter I was able to spend some free time assisting with the development of the &lt;a href=&#34;http://turfjs.org/&#34;&gt;Turf.js&lt;/a&gt; project!&lt;/p&gt;

&lt;p&gt;This was a very rewarding experience that has allowed me to better grasp some very important topics:&lt;/p&gt;

&lt;h3 id=&#34;test-driven-development&#34;&gt;Test Driven Development&lt;/h3&gt;

&lt;p&gt;Test driven development is one of the most powerful concepts I picked up while working with Turf. Turf uses the &lt;a href=&#34;https://github.com/substack/tape&#34;&gt;Tape&lt;/a&gt; testing environment, and just like turf, focuses on being lightweight and fast.&lt;/p&gt;

&lt;h3 id=&#34;documentation&#34;&gt;Documentation&lt;/h3&gt;

&lt;p&gt;Good documentation is hard. Thanks to Tom, Morgan, Lyzi at Mapbox for providing amazing documentation for Turf, and turf would be a very different community without the substantial work completed.&lt;/p&gt;

&lt;h3 id=&#34;modular&#34;&gt;Modular&lt;/h3&gt;

&lt;p&gt;It is so cool that Turf is modular, branching all of its separate components into different modules is simple, lightweight, and fast! The added benefit is that it helps with error checking as well as the many other benefits of abstraction on projects.&lt;/p&gt;

&lt;p&gt;Thanks so much to the Turf team for the wonderful learning experiences they have provided.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>